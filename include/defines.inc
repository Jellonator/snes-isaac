.ASCIITABLE
    MAP '0' TO '9' = $00
    MAP 'A' TO 'Z' = $0A
    MAP '.' = $24
    MAP ',' = $25
    MAP '!' = $26
    MAP '?' = $27
    MAP "'" = $28
    MAP '"' = $29
    MAP ':' = $2A
    MAP ' ' = $2B
.ENDA

; Joy buttons
.DEFINE JOY_A $0080 ; RIGHT
.DEFINE JOY_X $0040 ; UP
.DEFINE JOY_L $0020
.DEFINE JOY_R $0010
.DEFINE JOY_B $8000 ; DOWN
.DEFINE JOY_Y $4000 ; LEFT
.DEFINE JOY_SELECT $2000
.DEFINE JOY_START $1000
.DEFINE JOY_UP $0800
.DEFINE JOY_DOWN $0400
.DEFINE JOY_LEFT $0200
.DEFINE JOY_RIGHT $0100
.DEFINE JOY_ID $00FF
.DEFINE JOY_SHOOT_LEFT JOY_Y
.DEFINE JOY_SHOOT_RIGHT JOY_A
.DEFINE JOY_SHOOT_UP JOY_X
.DEFINE JOY_SHOOT_DOWN JOY_B

; Health slot IDs
.ENUMID 0
.ENUMID HEALTH_NULL
.ENUMID HEALTH_REDHEART_EMPTY
.ENUMID HEALTH_REDHEART_HALF
.ENUMID HEALTH_REDHEART_FULL
.ENUMID HEALTH_SOULHEART_FULL
.ENUMID HEALTH_SOULHEART_HALF
.ENUMID HEALTH_ETERNALHEART

; Map room types
.ENUMID 0
.ENUMID ROOMTYPE_EMPTY
.ENUMID ROOMTYPE_NORMAL
.ENUMID ROOMTYPE_ITEM
.ENUMID ROOMTYPE_BOSS
.ENUMID ROOMTYPE_SHOP
.ENUMID ROOMTYPE_SACRIFICE
.ENUMID ROOMTYPE_CURSE
.ENUMID ROOMTYPE_SECRET

; Map sizes
.ENUMID 0
.ENUMID ROOM_SIZE_REGULAR

; Player flags
.DEFINE PLAYER_FLAG_EYE $0001

; Object types
.ENUMID 0
.ENUMID OBJECT_TYPE_PENNY
.ENUMID OBJECT_TYPE_NICKEL
.ENUMID OBJECT_TYPE_DIME

; VRAM slots
; VRAM is 64KB of 16b words addressed $0000-$7FFF

; sprite OBJ page 0; granularity is (X % $2000) words
; Each 'page' is $1000 words
.DEFINE SPRITE1_BASE_ADDR $6000
; sprite OBJ page 1; should be offset by $1000-$4000 words from page 0
; granularity is (C % $1000) words
.DEFINE SPRITE2_BASE_ADDR $7000
; tile addresses; granularity is (X % $0400) words
.DEFINE BG1_TILE_BASE_ADDR $0400
.DEFINE BG2_TILE_BASE_ADDR $0800
.DEFINE BG3_TILE_BASE_ADDR $0C00
; character addresses; granularity is (X % $1000) words
.DEFINE BG1_CHARACTER_BASE_ADDR $2000 ; UI
.DEFINE BG2_CHARACTER_BASE_ADDR $3000 ; Background
.DEFINE BG3_CHARACTER_BASE_ADDR $0000 ; Effects
.DEFINE BG2_CHARITEM_BASE_ADDR $5000  ; Items

.DEFINE BG2_TILE_ADDR_OFFS_X %0000000000010000
.DEFINE BG2_TILE_ADDR_OFFS_Y %0000001000000000

; Room blocks
.DEFINE BLOCK_EMPTY 0
.DEFINE BLOCK_ROCK 1
.DEFINE BLOCK_ROCK_TINTED 2
.DEFINE BLOCK_POOP 3

; Room info
.DEFINE ROOM_TILE_WIDTH 12
.DEFINE ROOM_TILE_HEIGHT 8
.DEFINE ROOM_TILE_COUNT (ROOM_TILE_WIDTH*ROOM_TILE_HEIGHT)
.DEFINE DOOR_DEF_UP $01
.DEFINE DOOR_DEF_LEFT $02
.DEFINE DOOR_DEF_RIGHT $04
.DEFINE DOOR_DEF_DOWN $08
.DEFINE DOOR_DEF_MASK $0F
.DEFINE MAX_ROOM_OBJECTS 32

; Door types
; Note: even = can't enter, odd = can enter
; this way, checking if a door can be entered is as easy as `BIT #1`
; Opening a door should be ORA 1, closing should be AND ~1
.DEFINE DOORTYPE_NULL 0
.DEFINE DOORTYPE_NULL_OPEN 1 ; DO NOT USE
.DEFINE DOORTYPE_CLOSED 2
.DEFINE DOORTYPE_OPEN 3
.DEFINE DOORTYPE_GOLD_LOCKED 4
.DEFINE DOORTYPE_GOLD_OPEN 5
.DEFINE DOORTYPE_SHOP_LOCKED 6
.DEFINE DOORTYPE_SHOP_OPEN 7
.DEFINE DOORTYPE_BOSS_CLOSED 8
.DEFINE DOORTYPE_BOSS_OPEN 9
.DEFINE DOORTYPE_SECRET_HIDDEN 10
.DEFINE DOORTYPE_SECRET_OPEN 11

; zeropage buffers for calculating room info
; perhaps used for AI purposes? e.g. storing direction enemies should travel
.DEFINE ROOM_ZPBUF_ADDR (256-ROOM_TILE_COUNT) ; 160/$A0
.DEFINE ROOM_ZPBUFW_ADDR (256-ROOM_TILE_COUNT) ; 64/$40

; maptile flags
.DEFINE MAPTILE_EXPLORED $01
.DEFINE MAPTILE_HAS_PLAYER $02
.DEFINE MAPTILE_COMPLETED $04
; used for generation step; marks tiles in the mapgenAvailableRooms table
.DEFINE MAPTILE_AVAILABLE $80

; Map info
.DEFINE MAP_MAX_WIDTH 16
.DEFINE MAP_MAX_HEIGHT 10
.DEFINE MAP_MAX_SIZE (MAP_MAX_WIDTH*MAP_MAX_HEIGHT)
.DEFINE MAX_MAP_SLOTS 64
.DEFINE MAP_ZPBUF_ADDR (256-MAX_MAP_SLOTS) ; 96/$60

; VQueue info
.DEFINE VQUEUE_MAX_SIZE 128

; room position info
.DEFINE ROOM_CENTER_Y (32 + 2*16 + 4*16)
.DEFINE ROOM_DOOR_RADIUS 5
.DEFINE ROOM_CENTER_X (8*16)
.DEFINE ROOM_LEFT (2*16)
.DEFINE ROOM_RIGHT (14*16)
.DEFINE ROOM_TOP (ROOM_CENTER_Y - 4*16)
.DEFINE ROOM_BOTTOM (ROOM_CENTER_Y + 4*16)

; player position info
.DEFINE PLAYER_HITBOX_LEFT 4
.DEFINE PLAYER_HITBOX_RIGHT 12
.DEFINE PLAYER_HITBOX_TOP 5
.DEFINE PLAYER_HITBOX_BOTTOM 10

; tile collision info
; .DEFINE TILE_HITBOX_MARGIN 2

; sprite table info
.DEFINE SPRITE_TABLE_SIZE 64
.DEFINE SPRITE_TABLE_CELLAR_SIZE 16
.DEFINE SPRITE_TABLE_TOTAL_SIZE (SPRITE_TABLE_SIZE + SPRITE_TABLE_CELLAR_SIZE)

.ENUMID 64
.ENUMID SPRITE_LIST_EMPTY
.ENUMID SPRITE_QUEUE_SIZE

; Entity info
; Number of objects stored per room
.DEFINE ENTITY_STORE_COUNT 24
; Enemies and other objects which may consume multiple sprite slots
.DEFINE ENTITY_TOTAL_MAX 96
.DEFINE ENTITY_TOTAL_MAX_INDEX (2 * ENTITY_TOTAL_MAX)
; Character entities which may have health, status effects, custom sprites, etc.
.DEFINE ENTITY_CHARACTER_MAX 24
.DEFINE ENTITY_CHARACTER_MAX_INDEX (2 * ENTITY_CHARACTER_MAX)

.DEFINE ENTITY_TYPE_ATTACK_FLY 128

.DEFINE SPATIAL_LAYER_COUNT 4

; Entity Mask: Defines types that can collide with given mask
; Objects that can be damaged by player tears
.DEFINE ENTITY_MASK_TEAR $01
; Objects that can be damaged by enemy projectiles
.DEFINE ENTITY_MASK_PROJECTILE $02
; Objects that can be damaged by bombs
.DEFINE ENTITY_MASK_BOMBABLE $04


; Entity Signals: Used to tell an entity to respond to some form of interaction
; Signaled when an entity is killed (or otherwise needs to handle its own removal)
.DEFINE ENTITY_SIGNAL_KILL $01
